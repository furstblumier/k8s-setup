---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.2.0/charts/other/app-template/values.schema.json

# Configure options applied to all pods
defaultPodOptions:
  automountServiceAccountToken: false

controllers:
  # Configure the main controller
  main:
    # Configure the pod-specific securityContext
    pod: {}

    containers:
      # Configure the main application container
      main:
        image:
          # -- image repository
          repository: lscr.io/linuxserver/qbittorrent
          # -- image tag
          # this example is not automatically updated, so be sure to use the latest image
          tag: latest
        # Configure the container-specific securityContext
        env:
          PUID: 1000
          PGID: 1000
          TZ: Europe/Berlin
          WEBUI_PORT: 8080
          TORRENTING_PORT: 47777
    # Configure the gluetun sidecar
    initContainers:
      gluetun:
        image:
          # -- image repository
          repository: ghcr.io/qdm12/gluetun
          # -- image tag
          # this example is not automatically updated, so be sure to use the latest image
          tag: latest
        # -- environment variables.
        # See [image docs](https://github.com/qdm12/gluetun-wiki) for more details on how to configure
        # your VPN and how to set up port-forwarding.
        envFrom:
          - secretRef:
              name: gluetun-env
        # Configure the container-specific securityContext
        securityContext:
          capabilities:
            add:
              - NET_ADMIN

      curlpodtest:
        image:
          repository: curlimages/curl
          tag: latest
        command: ['/bin/sh', '-c']
        args:
          - |
            IP=$(curl -s4 checkip.amazonaws.com)
            EXPECTED_IP="141.144.196.15"
            if [ "$IP" != "$EXPECTED_IP" ]; then
              echo "IP is different from $EXPECTED_IP. Current IP is $IP."
            else
              echo "IP is $EXPECTED_IP. Exiting..."
              exit 1
            fi
service:
  # Configure a service for the main application
  main:
    controller: main
    type: ClusterIP
    ports:
      http:
        port: 8080

ingress:
  # Configure an Ingress for the main application
  main:
    className: "cilium"
    annotations:
      cert-manager.io/cluster-issuer: cf-issuer
    hosts:
      - host: "qbit.magi.furst.blue"
        paths:
          - path: /
            pathType: Prefix
            service:
              identifier: main
              port: http
    tls:
      - hosts:
          - qbit.magi.furst.blue
        secretName: qbit-tls

persistence:
  # Configure the main configuration storage location
  config:
    type: persistentVolumeClaim
    storageClass: freenas-iscsi-csi
    accessMode: ReadWriteOnce
    size: 1Gi
    advancedMounts:
      main:
        main:
          - path: /config
  media:
    type: nfs
    server: nas.furst.blue
    path: /mnt/pool1/media
    advancedMounts:
      main:
        main:
          - path: /media

